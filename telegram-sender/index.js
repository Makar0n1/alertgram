const { Kafka } = require('kafkajs');
   const TelegramBot = require('node-telegram-bot-api');
   const { PrismaClient } = require('@prisma/client');

   const kafka = new Kafka({ clientId: 'telegram-sender', brokers: [process.env.KAFKA_BROKER] });
   const consumer = kafka.consumer({ groupId: 'telegram-group' });
   const prisma = new PrismaClient();
   const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);

   async function start() {
     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å chatId
     const users = await prisma.user.findMany({ select: { chatId: true } });
     for (const user of users) {
       if (user.chatId) {
         try {
           await bot.sendMessage(user.chatId, '‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!');
         } catch (err) {
           console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chatId ${user.chatId}:`, err);
         }
       }
     }

     await consumer.connect();
     await consumer.subscribe({ topic: 'notification' });

     await consumer.run({
       eachMessage: async ({ message }) => {
         const email = JSON.parse(message.value);
         const user = await prisma.user.findUnique({ where: { id: email.userId } });
         if (user.chatId) {
           const text = `üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ!\n–û—Ç: ${email.from}\n–¢–µ–º–∞: ${email.subject}\n–¢–µ–∫—Å—Ç: ${email.text}`;
           await bot.sendMessage(user.chatId, text);
         }
       },
     });
   }

   start().catch(console.error);